/*
 *    Copyright (C) 2015 QAware GmbH
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id "de.undercouch.download" version "3.1.1"
    id "com.github.hierynomus.license" version "0.13.1"
    id "com.jfrog.bintray" version "1.7.2"
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    group 'de.qaware.chronix'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "http://dl.bintray.com/chronix/maven"
        }
    }

    jacoco {
        toolVersion = '0.7.6.201602180812'
    }
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.hierynomus.license'

    version = "0.5-beta"

    license {
        includes(["**/*.java", "**/*.groovy"])
        mapping {
            java = 'SLASHSTAR_STYLE'
            groovy = 'SLASHSTAR_STYLE'
        }
        excludes(["**/DateAxis.java"])
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        //Logging
        compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.slf4j:jcl-over-slf4j:1.7.12'
        compile 'org.apache.logging.log4j:log4j-api:2.4'
        compile 'org.apache.logging.log4j:log4j-core:2.4'
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.4'
    }


    test {
        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }

    // This disables the pedantic doclint feature of JDK8
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    jacocoTestReport {
        group = 'Coverage'
        description = 'Generate Jacoco coverage report for subproject'

        additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
        classDirectories = project.files(sourceSets.main.output)

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}


task jacocoRootReport(type: JacocoReport, group: 'Coverage') {
    description = 'Generates aggregate Jacoco coverage report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

def isCI = System.env.'CI' == 'true'
tasks.coveralls {
    group = 'Coverage'
    description = 'Upload aggregate Jacoco coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { isCI }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

